// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: bars.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct SyllableProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var syllable: String = String()

  var barIndex: Int32 {
    get {return _barIndex ?? 0}
    set {_barIndex = newValue}
  }
  /// Returns true if `barIndex` has been explicitly set.
  var hasBarIndex: Bool {return self._barIndex != nil}
  /// Clears the value of `barIndex`. Subsequent reads from it will return its default value.
  mutating func clearBarIndex() {self._barIndex = nil}

  var offset: Double {
    get {return _offset ?? 0}
    set {_offset = newValue}
  }
  /// Returns true if `offset` has been explicitly set.
  var hasOffset: Bool {return self._offset != nil}
  /// Clears the value of `offset`. Subsequent reads from it will return its default value.
  mutating func clearOffset() {self._offset = nil}

  var duration: Double {
    get {return _duration ?? 0}
    set {_duration = newValue}
  }
  /// Returns true if `duration` has been explicitly set.
  var hasDuration: Bool {return self._duration != nil}
  /// Clears the value of `duration`. Subsequent reads from it will return its default value.
  mutating func clearDuration() {self._duration = nil}

  var pitch: Double {
    get {return _pitch ?? 0}
    set {_pitch = newValue}
  }
  /// Returns true if `pitch` has been explicitly set.
  var hasPitch: Bool {return self._pitch != nil}
  /// Clears the value of `pitch`. Subsequent reads from it will return its default value.
  mutating func clearPitch() {self._pitch = nil}

  var parentWord: WordProto {
    get {return _parentWord ?? WordProto()}
    set {_parentWord = newValue}
  }
  /// Returns true if `parentWord` has been explicitly set.
  var hasParentWord: Bool {return self._parentWord != nil}
  /// Clears the value of `parentWord`. Subsequent reads from it will return its default value.
  mutating func clearParentWord() {self._parentWord = nil}

  var marked: Bool {
    get {return _marked ?? false}
    set {_marked = newValue}
  }
  /// Returns true if `marked` has been explicitly set.
  var hasMarked: Bool {return self._marked != nil}
  /// Clears the value of `marked`. Subsequent reads from it will return its default value.
  mutating func clearMarked() {self._marked = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _barIndex: Int32? = nil
  fileprivate var _offset: Double? = nil
  fileprivate var _duration: Double? = nil
  fileprivate var _pitch: Double? = nil
  fileprivate var _parentWord: WordProto? = nil
  fileprivate var _marked: Bool? = nil
}

struct WordProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var word: String = String()

  var syllables: [SyllableProto] = []

  /// likely just an index
  var id: String {
    get {return _id ?? String()}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _id: String? = nil
}

struct BarProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var words: [WordProto] = []

  var syllables: [SyllableProto] = []

  var rawWords: String {
    get {return _rawWords ?? String()}
    set {_rawWords = newValue}
  }
  /// Returns true if `rawWords` has been explicitly set.
  var hasRawWords: Bool {return self._rawWords != nil}
  /// Clears the value of `rawWords`. Subsequent reads from it will return its default value.
  mutating func clearRawWords() {self._rawWords = nil}

  var rawSyllables: String {
    get {return _rawSyllables ?? String()}
    set {_rawSyllables = newValue}
  }
  /// Returns true if `rawSyllables` has been explicitly set.
  var hasRawSyllables: Bool {return self._rawSyllables != nil}
  /// Clears the value of `rawSyllables`. Subsequent reads from it will return its default value.
  mutating func clearRawSyllables() {self._rawSyllables = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _rawWords: String? = nil
  fileprivate var _rawSyllables: String? = nil
}

struct SongProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var artist: String = String()

  var song: String = String()

  var bars: [BarProto] = []

  var audio: Data {
    get {return _audio ?? SwiftProtobuf.Internal.emptyData}
    set {_audio = newValue}
  }
  /// Returns true if `audio` has been explicitly set.
  var hasAudio: Bool {return self._audio != nil}
  /// Clears the value of `audio`. Subsequent reads from it will return its default value.
  mutating func clearAudio() {self._audio = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _audio: Data? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension SyllableProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SyllableProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "syllable"),
    2: .standard(proto: "bar_index"),
    3: .same(proto: "offset"),
    4: .same(proto: "duration"),
    5: .same(proto: "pitch"),
    6: .standard(proto: "parent_word"),
    7: .same(proto: "marked"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.syllable)
      case 2: try decoder.decodeSingularInt32Field(value: &self._barIndex)
      case 3: try decoder.decodeSingularDoubleField(value: &self._offset)
      case 4: try decoder.decodeSingularDoubleField(value: &self._duration)
      case 5: try decoder.decodeSingularDoubleField(value: &self._pitch)
      case 6: try decoder.decodeSingularMessageField(value: &self._parentWord)
      case 7: try decoder.decodeSingularBoolField(value: &self._marked)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.syllable.isEmpty {
      try visitor.visitSingularStringField(value: self.syllable, fieldNumber: 1)
    }
    if let v = self._barIndex {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._offset {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
    }
    if let v = self._duration {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 4)
    }
    if let v = self._pitch {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 5)
    }
    if let v = self._parentWord {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._marked {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SyllableProto, rhs: SyllableProto) -> Bool {
    if lhs.syllable != rhs.syllable {return false}
    if lhs._barIndex != rhs._barIndex {return false}
    if lhs._offset != rhs._offset {return false}
    if lhs._duration != rhs._duration {return false}
    if lhs._pitch != rhs._pitch {return false}
    if lhs._parentWord != rhs._parentWord {return false}
    if lhs._marked != rhs._marked {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension WordProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "WordProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "word"),
    2: .same(proto: "syllables"),
    3: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.word)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.syllables)
      case 3: try decoder.decodeSingularStringField(value: &self._id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.word.isEmpty {
      try visitor.visitSingularStringField(value: self.word, fieldNumber: 1)
    }
    if !self.syllables.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.syllables, fieldNumber: 2)
    }
    if let v = self._id {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: WordProto, rhs: WordProto) -> Bool {
    if lhs.word != rhs.word {return false}
    if lhs.syllables != rhs.syllables {return false}
    if lhs._id != rhs._id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension BarProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "BarProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "words"),
    2: .same(proto: "syllables"),
    3: .standard(proto: "raw_words"),
    4: .standard(proto: "raw_syllables"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.words)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.syllables)
      case 3: try decoder.decodeSingularStringField(value: &self._rawWords)
      case 4: try decoder.decodeSingularStringField(value: &self._rawSyllables)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.words.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.words, fieldNumber: 1)
    }
    if !self.syllables.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.syllables, fieldNumber: 2)
    }
    if let v = self._rawWords {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._rawSyllables {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: BarProto, rhs: BarProto) -> Bool {
    if lhs.words != rhs.words {return false}
    if lhs.syllables != rhs.syllables {return false}
    if lhs._rawWords != rhs._rawWords {return false}
    if lhs._rawSyllables != rhs._rawSyllables {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SongProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SongProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "artist"),
    2: .same(proto: "song"),
    3: .same(proto: "bars"),
    4: .same(proto: "audio"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.artist)
      case 2: try decoder.decodeSingularStringField(value: &self.song)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.bars)
      case 4: try decoder.decodeSingularBytesField(value: &self._audio)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.artist.isEmpty {
      try visitor.visitSingularStringField(value: self.artist, fieldNumber: 1)
    }
    if !self.song.isEmpty {
      try visitor.visitSingularStringField(value: self.song, fieldNumber: 2)
    }
    if !self.bars.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.bars, fieldNumber: 3)
    }
    if let v = self._audio {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SongProto, rhs: SongProto) -> Bool {
    if lhs.artist != rhs.artist {return false}
    if lhs.song != rhs.song {return false}
    if lhs.bars != rhs.bars {return false}
    if lhs._audio != rhs._audio {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
